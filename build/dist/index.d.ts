// Generated by dts-bundle-generator v9.5.1

declare class SessionStorageService {
	private prefix;
	setItem<T>(key: string, data: T): void;
	getItem<T>(key: string): T | undefined;
	removeItem(key: string): void;
}
export type Message<T = unknown> = {
	id: string | null;
	type: MessageType;
	payload: T;
};
declare enum MessageType {
	ERROR = "ERROR",
	USER_LOGIN = "USER_LOGIN",
	USER_LOGOUT = "USER_LOGOUT",
	USER_EXTERNAL_LOGIN = "USER_EXTERNAL_LOGIN",
	USER_EXTERNAL_LOGOUT = "USER_EXTERNAL_LOGOUT",
	USER_ACTIVE = "USER_ACTIVE",
	USER_INACTIVE = "USER_INACTIVE",
	MSG_FROM_USER = "MSG_FROM_USER",
	MSG_SEND = "MSG_SEND",
	MSG_DELETE = "MSG_DELETE",
	MSG_READ = "MSG_READ",
	MSG_EDIT = "MSG_EDIT"
}
declare class WebSocketService {
	private readonly url;
	private socket;
	private listeners;
	constructor(url: string);
	connect(): Promise<void>;
	send<T>(type: MessageType, payload: T): string;
	on<T>(type: string, handler: (payload: Message<T>) => void): void;
	private emit;
	disconnect(): void;
}
declare class EventEmitter {
	private events;
	subscribe(eventName: string, callback: Function): void;
	unsubscribe(eventName: string, callback: Function): void;
	emit<T>(eventName: string, args?: T): void;
}
export type AuthPayload = {
	login: string;
	password: string;
};
declare class AuthService {
	private wsService;
	private sessionStorageService;
	private eventEmmiter;
	private readonly storageKey;
	private currentUser;
	private errorHandler;
	constructor(wsService: WebSocketService, sessionStorageService: SessionStorageService, eventEmmiter: EventEmitter);
	restoreUser(): void;
	login(payload: AuthPayload): void;
	logout(): void;
	private authenticate;
	getUser(): AuthPayload | null;
	isAuthenticated(): boolean;
	private alreadyAuthorizedHandler;
	private incorrectPasswordHandler;
	private userLoginHandler;
}
declare class MessageService {
	private wsService;
	private eventEmitter;
	constructor(wsService: WebSocketService, eventEmitter: EventEmitter);
	private getUserMessageHandler;
	private userMessageSentHandler;
	private userMessageDeleteHandler;
	private userMessageReadHandler;
	private userMessageEditHandler;
	getUserMessage(userLogin: string): string;
	sendUserMessage(to: string, text: string): void;
	readUserMessage(messageId: string): void;
	deleteUserMessage(id: string): void;
	editUserMessage(id: string, text: string): void;
}
declare class UserService {
	private wsService;
	private eventEmitter;
	private allUsers;
	constructor(wsService: WebSocketService, eventEmitter: EventEmitter);
	private userAuthenticationHandler;
	private userLogoutHandler;
	private getAuthenticatedUsers;
	private getUnauthorizedUsers;
	private getUserHandler;
	getUsers(): void;
	clearUsers(): void;
}
export declare const wsService: WebSocketService;
export declare const eventEmitter: EventEmitter;
export declare const sessionStorageService: SessionStorageService;
export declare const authService: AuthService;
export declare const userService: UserService;
export declare const messageService: MessageService;

export {};
